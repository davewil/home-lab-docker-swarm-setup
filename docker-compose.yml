version: '3.8'

services:
  web:
    image: 192.168.1.76:5000/teststack-web:latest
    networks:
      - web-network
    deploy:
      replicas: 3
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback

  traefik:
    image: traefik:v2.10
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedByDefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "8081:80"
      - "443:443"
      - "8080:8080"
    networks:
      - web-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"
        - "traefik.http.services.dashboard.loadbalancer.server.port=8080"

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: myapp
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    networks:
      - db-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      restart_policy:
        condition: on-failure

  redis:
    image: redis:7-alpine
    networks:
      - db-network
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == worker

  api:
    image: node:18-alpine
    working_dir: /app
    command: ["npm", "start"]
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://myuser:mypassword@postgres:5432/myapp
      - REDIS_URL=redis://redis:6379
    networks:
      - web-network
      - db-network
    deploy:
      replicas: 2
      placement:
        constraints:
          - node.role == worker
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.api.rule=Host(`api.localhost`)"
        - "traefik.http.services.api.loadbalancer.server.port=3000"

  prometheus:
    image: 192.168.1.76:5000/teststack-prometheus:latest
    ports:
      - "9090:9090"
    networks:
      - monitoring-network
    volumes:
      - prometheus-data:/prometheus
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    networks:
      - monitoring-network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  loki:
    image: grafana/loki:2.9.0
    ports:
      - "3100:3100"
    networks:
      - monitoring-network
    volumes:
      - loki-data:/loki
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  promtail:
    image: 192.168.1.76:5000/teststack-promtail:latest
    volumes:
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - monitoring-network
    deploy:
      mode: global

networks:
  web-network:
    driver: overlay
    attachable: true
  db-network:
    driver: overlay
    attachable: true
  monitoring-network:
    driver: overlay
    attachable: true

volumes:
  postgres-data:
  prometheus-data:
  grafana-data:
  loki-data: